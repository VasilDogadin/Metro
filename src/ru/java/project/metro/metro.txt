Проект метро

В этом проекте можно пользоваться всеми инструментами из библиотеки jdk.
1. Этап проектирования
Мы захотели построить метро в городе Пермь. Было принятно решение о строении двух линий метро:
Красная, со станциями:
-Спортивная
 | Перегон 2 минуты 21 секуда
-Медведковская
 | Перегон 1 минута 58 секунд
-Молодежная
 | Перегон 3 минуты
-Пермь 1
 | Перегон 2 минуты 10 секунд
-Пермь 2
 | Перегон 4 минуты 26 секунд
-Дворец Культуры

Синяя, со станциями:
-Пацанская
 | Перегон 1 минута 30 секунд
-Улица Кирова
 | Перегон 1 минута 47 секунд
-Тяжмаш
 | Перегон 3 минуты 19 секунд
-Нижнекамская
 | Перегон 1 минута 48 секунд
-Соборная

Переход между линиями будет происходить на станции Тяжмаш/Пермь 1.

Необходимо создать классы:
1.1 Метро - содержит имя города, набор уникальных линий.
1.2 Линия метро - содержит цвет линии, станции линии, ссылку на метро в которой линия находится.
1.3 Станция - содержит имя станции, предыдущую и следующую станцию, время перегона только до следующей станции(java.time.Duration), линию к которой принадлежит, станции на которые можно пересесть, ссылку на метро в которой находится.
1.4 В классе метро должна быть функция "Создать новую линию" (добавляется в список линий метро). Передается цвет линии. Проверка на то, что не существует линии с таким же цветом.
1.5 В классе метро должна быть функция "Создать первую станцию в линии". Передается цвет линии, новое имя станции, список станций на пересадку. Должны быть проверки:
 -Линия с таким цветом существует
 -Станции с таким именем не существует во всех линиях.
 -Внутри линии нет станций
1.6 В классе метро должна быть функция "Создать конечную станцию". Передается цвет линии, новое имя станции, время перегона до данной станции для предыдущей станции, список станций на пересадку. Время перегона добавляется в предыдущую станцию. Должны быть проверки:
 -Линия с таким именем существует
 -Проверка на существование предыдущей станции.
 -Предыдущая станция должна не иметь следующей станции.
 -Время перегона больше 0
 -Станции с таким именем не существует во всех линиях.
1.7 Переопределить вывод в строку для Метро: имя города, список линий.
Переопределить вывод в строку для Линии: цвет линии, список станций.
Переопределить вывод в строку для Станции: имя станции, переходы на линии (цветы линии) (нет, не ошибка, именно цвет линий, а не станции пересадки).
1.8 Создать Runner и в нем создать метро для Перми, описанное выше. Ожидаемый вывод для метро:
Metro{city='Пермь', lines=[Line{color='Красная', stations=[Station{name='Спортивная', changeLines=null'}, Station{name='Медведковская', changeLines=null'}, Station{name='Молодежная', changeLines=null'}, Station{name='Пермь 1', changeLines=Синяя'}, Station{name='Пермь 2', changeLines=null'}, Station{name='Дворец Культуры', changeLines=null'}]}, Line{color='Синяя', stations=[Station{name='Пацанская', changeLines=null'}, Station{name='Улица Кирова', changeLines=null'}, Station{name='Тяжмаш', changeLines=Красная'}, Station{name='Нижнекамская', changeLines=null'}, Station{name='Соборная', changeLines=null'}]}]}

Этап №2. Создание касс и продажи разовых билетов. Суть второго этапа: посчитать количество перегонов между станциями. На основании количества перегонов рассчитать стоимость билета.
2.1 В классе метро должна быть функция определения станции на пересадку. На вход линия с которой начнется поездка, линия на которую нужно пересесть. Возвращается станция пересадки.
2.2 Создать вспомогательный метод в классе метро, который считает количество перегонов между двумя станциями(начальной и конечной) внутри одной линии. Возвращает количество перегонов. Алгоритм: в начальной станции происходит обращение к следующей станции. Если следующая станция равна конечной, то возвращается 1. Если станция не равна, то берем следующую станцию от следующей станции (увеличивая счетчик перегонов на 1). Если следущей станции нет и мы не нашли конечную станцию, то возвращаем -1. Пример: Пример: Станции "А" - "В" между ними 1 перегон. "А" - "В" - "С" - между станциями "А" и "С" два перегона.
2.3 Создать вспомогательный метод в классе метро, который считает количество перегонов между двумя станциями, только поиск идет по предыдущим станциям внутри одной линии.
2.4 Создать вспомогательный метод в классе метро, который считает количество перегонов между двумя станциями на одной линии: сначала ищем по следующим станциям (метод 2.2) - если этот метод возвращает не -1 возвращаем количество перегонов, то начинаем поиск по предыдущим (метод 2.3) - если этот метод возвращает не -1 возвращаем количество перегонов. Если оба метода вернули -1, то должна возникнуть ошибка "нет пути из станции {имя станции начальной} {имя станции конечной}".
2.5 В классе метро должна быть функция определения количества перегонов от одной станции до другой (даже если станции находятся на разных линиях). На вход наименование начальной станции, наименование конечной станции. На выход количество перегонов. Алгоритм:
	2.5.1 Проверяем, совпадают линии у станций
	2.5.2 Если линии совпали: считаем количество перегонов между станциями (метод 2.4).
	2.5.3 Если линии не совпали:
	   2.5.3.1 Находим станцию до которой едем для пересадки в начальной линии (метод 2.1).
	   2.5.3.2 Считаем количество перегонов от станции начальной станции до станции пересадки (метод 2.4).
	   2.5.3.3 Находим станцию на которую пересели в конечной линии (метод 2.1).
	   2.5.3.4 Считаем количество перегонов от станции пересадки конечной линии до конечной станции (метод 2.4).
	   2.5.3.5 Суммируем пересадки из 2.5.3.2 и 2.5.3.4. Возвращаем перегоны.
	Проверки:
	-Проверка на существование начальной и конечной станции.
	-Проверка начальная станция не равна конечной.
2.6 У каждой станции появляется касса по продаже билетов. В каждой кассе ведется подсчет дохода с продажи этих билетов за даты (не static!).
2.7 В классе станция должнa быть функция продажи билета. На вход дата покупки, имя начальной станции, имя конечной станции. Цена на билет = количество перегонов между станциями * 5 + единая плата 20 рублей. Т.е. стоимость проезда между станциями "A" и "D" ( "A" - "B" - "C" - "D" ) составит 35 рублей (5 * 3 + 20). Переход на линию не влияет на стоимость. Оплата проезда поступает в кассу станции на которой произошла продажа. Пример: была покупка билета на станции "А" 20.01.2023, начальная станция "А" , конечная станция "B". В кассу будет запись о доходах за 20.01.2023 - 25 руб. В случае покупки второго такого же билета за эту дату, запись за 20.01.2023 будет содержать сумму продажи двух билетов (50 руб). Проверки:
-Существование данных станций
-Станция начала не равна конечной станции.

Этап №3. Создание системы абонементов.
3.1 В классе станция должна быть функция продажи проездного билета на месяц. На вход: дата продажи (java.util.LocalDate). Стоимость безлимитного проездного 3000 рублей на месяц. Метро генерирует номер проездного формата [a][0000-9999]. Пример: первый номер абонемента - а0000, тысяча первый билет - a1001. Метро хранит список проданных абонементов и их дату окончания. Доход от продажи засчитывается в кассу продавшей станции.
3.2 В классе метро должна быть функция проверки действительности абонемента. На вход номер билета, дата проверки. На выход действителен или нет.
3.3 В классе станция должна быть функция продления абонемента. На вход номер билета, дата продления. Билет продлевается на месяц от даты покупки. В кассу вносится 3000. Пример: был абонемент с 31.10 по 30.11. Пассажир приходит 05.12 продлить действие абонемента. Новый срок действия абонемента: с 05.12 по 05.01
3.4 В классе метро должна быть функция печати доходов касс всех станций метро по дням в которые были продажи. Пример вывода:
23.01.2023 - 6000 (сумма доходов со всех касс за эту дату)
24.01.2023 - 25 (сумма доходов со всех касс за эту дату)

Этап №4. Рефакторинг
Убрать все использования for each, for i. Заменить на Stream.